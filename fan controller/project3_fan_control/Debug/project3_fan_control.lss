
project3_fan_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  000024b0  00002524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001f8c  00000000  00000000  00002648  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e76  00000000  00000000  000045d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000544a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  000055ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000057dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00007be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00008f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000a144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000a304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000a5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000af68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <main>
      7a:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e7       	ldi	r26, 0x7C	; 124
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e7       	ldi	r24, 0x7C	; 124
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6c e7       	ldi	r22, 0x7C	; 124
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 06 12 	jmp	0x240c	; 0x240c <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	ec 57       	subi	r30, 0x7C	; 124
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_init>:
 */
#include "ADC_driver.h"
#include <avr/io.h>
#include "common_macros.h"

void ADC_init(const ADC_ConfigType *Config_Ptr){
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <ADC_init+0x6>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX =0;
     e2c:	e7 e2       	ldi	r30, 0x27	; 39
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	10 82       	st	Z, r1
    ADMUX =(ADMUX&0x3F)|((Config_Ptr->ref_volt)<<6); /* ADC volt set */
     e32:	a7 e2       	ldi	r26, 0x27	; 39
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e7 e2       	ldi	r30, 0x27	; 39
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	28 2f       	mov	r18, r24
     e3e:	2f 73       	andi	r18, 0x3F	; 63
     e40:	e9 81       	ldd	r30, Y+1	; 0x01
     e42:	fa 81       	ldd	r31, Y+2	; 0x02
     e44:	80 81       	ld	r24, Z
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	00 24       	eor	r0, r0
     e4c:	96 95       	lsr	r25
     e4e:	87 95       	ror	r24
     e50:	07 94       	ror	r0
     e52:	96 95       	lsr	r25
     e54:	87 95       	ror	r24
     e56:	07 94       	ror	r0
     e58:	98 2f       	mov	r25, r24
     e5a:	80 2d       	mov	r24, r0
     e5c:	82 2b       	or	r24, r18
     e5e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN); /* ADC enable */
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 68       	ori	r24, 0x80	; 128
     e6c:	8c 93       	st	X, r24
	ADCSRA=(ADCSRA&0xF8)|(Config_Ptr->prescaler); /* ADC prescaler set */
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	98 2f       	mov	r25, r24
     e7a:	98 7f       	andi	r25, 0xF8	; 248
     e7c:	e9 81       	ldd	r30, Y+1	; 0x01
     e7e:	fa 81       	ldd	r31, Y+2	; 0x02
     e80:	81 81       	ldd	r24, Z+1	; 0x01
     e82:	89 2b       	or	r24, r25
     e84:	8c 93       	st	X, r24
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <ADC_readChannel>:
uint16 ADC_readChannel(uint8 Ch_num){
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
	Ch_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	87 70       	andi	r24, 0x07	; 7
     ea0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     ea2:	a7 e2       	ldi	r26, 0x27	; 39
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e7 e2       	ldi	r30, 0x27	; 39
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	80 7e       	andi	r24, 0xE0	; 224
     eae:	8c 93       	st	X, r24
	ADMUX |= Ch_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     eb0:	a7 e2       	ldi	r26, 0x27	; 39
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e7 e2       	ldi	r30, 0x27	; 39
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	90 81       	ld	r25, Z
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	89 2b       	or	r24, r25
     ebe:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     ec0:	a6 e2       	ldi	r26, 0x26	; 38
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e6 e2       	ldi	r30, 0x26	; 38
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 64       	ori	r24, 0x40	; 64
     ecc:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     ece:	e6 e2       	ldi	r30, 0x26	; 38
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	80 71       	andi	r24, 0x10	; 16
     eda:	90 70       	andi	r25, 0x00	; 0
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	b9 f3       	breq	.-18     	; 0xece <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it ) */
     ee0:	a6 e2       	ldi	r26, 0x26	; 38
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e6 e2       	ldi	r30, 0x26	; 38
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 61       	ori	r24, 0x10	; 16
     eec:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
     eee:	e4 e2       	ldi	r30, 0x24	; 36
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
}
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <DcMotor_init>:
/* functions prototypes */
/*
The Function responsible for setup the direction for the two motor pins through the GPIO driver.
Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_init(void){
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	/* Set direction for the motor pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	41 e0       	ldi	r20, 0x01	; 1
     f16:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <GPIO_setupPinDirection>
	/* stop the motor at first */
	GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <DcMotor_Rotate>:

/*
The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <DcMotor_Rotate+0x6>
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	6a 83       	std	Y+2, r22	; 0x02
	if(state==STOP){
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	88 23       	and	r24, r24
     f46:	71 f4       	brne	.+28     	; 0xf64 <DcMotor_Rotate+0x30>
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
		PWM_Timer0_Start(speed);
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <PWM_Timer0_Start>
     f62:	21 c0       	rjmp	.+66     	; 0xfa6 <DcMotor_Rotate+0x72>
	}
	else if(state==CW){
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	71 f4       	brne	.+28     	; 0xf86 <DcMotor_Rotate+0x52>
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	41 e0       	ldi	r20, 0x01	; 1
     f7a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
		PWM_Timer0_Start(speed);
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	0e 94 57 0d 	call	0x1aae	; 0x1aae <PWM_Timer0_Start>
     f84:	10 c0       	rjmp	.+32     	; 0xfa6 <DcMotor_Rotate+0x72>
	}
	else if(state==ACW){
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	69 f4       	brne	.+26     	; 0xfa6 <DcMotor_Rotate+0x72>
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
		PWM_Timer0_Start(speed);
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <PWM_Timer0_Start>
	}
	else
	{
		/*Do nothing*/
	}
}
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void){
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	2e 97       	sbiw	r28, 0x0e	; 14
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
	/* set RS ,E as output */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	41 e0       	ldi	r20, 0x01	; 1
     fca:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	41 e0       	ldi	r20, 0x01	; 1
     fd4:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	62 e0       	ldi	r22, 0x02	; 2
     fdc:	41 e0       	ldi	r20, 0x01	; 1
     fde:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <GPIO_setupPinDirection>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a0 ea       	ldi	r26, 0xA0	; 160
     fe8:	b1 e4       	ldi	r27, 0x41	; 65
     fea:	8b 87       	std	Y+11, r24	; 0x0b
     fec:	9c 87       	std	Y+12, r25	; 0x0c
     fee:	ad 87       	std	Y+13, r26	; 0x0d
     ff0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	4a e7       	ldi	r20, 0x7A	; 122
    1000:	53 e4       	ldi	r21, 0x43	; 67
    1002:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	8f 83       	std	Y+7, r24	; 0x07
    100c:	98 87       	std	Y+8, r25	; 0x08
    100e:	a9 87       	std	Y+9, r26	; 0x09
    1010:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1026:	88 23       	and	r24, r24
    1028:	2c f4       	brge	.+10     	; 0x1034 <LCD_init+0x84>
		__ticks = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
    1032:	3f c0       	rjmp	.+126    	; 0x10b2 <LCD_init+0x102>
	else if (__tmp > 65535)
    1034:	6f 81       	ldd	r22, Y+7	; 0x07
    1036:	78 85       	ldd	r23, Y+8	; 0x08
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	3f ef       	ldi	r19, 0xFF	; 255
    1040:	4f e7       	ldi	r20, 0x7F	; 127
    1042:	57 e4       	ldi	r21, 0x47	; 71
    1044:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1048:	18 16       	cp	r1, r24
    104a:	4c f5       	brge	.+82     	; 0x109e <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104c:	6b 85       	ldd	r22, Y+11	; 0x0b
    104e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1050:	8d 85       	ldd	r24, Y+13	; 0x0d
    1052:	9e 85       	ldd	r25, Y+14	; 0x0e
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e2       	ldi	r20, 0x20	; 32
    105a:	51 e4       	ldi	r21, 0x41	; 65
    105c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	0f c0       	rjmp	.+30     	; 0x1094 <LCD_init+0xe4>
    1076:	89 e1       	ldi	r24, 0x19	; 25
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <LCD_init+0xd2>
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	9e 83       	std	Y+6, r25	; 0x06
    1092:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	69 f7       	brne	.-38     	; 0x1076 <LCD_init+0xc6>
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109e:	6f 81       	ldd	r22, Y+7	; 0x07
    10a0:	78 85       	ldd	r23, Y+8	; 0x08
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	9e 83       	std	Y+6, r25	; 0x06
    10b0:	8d 83       	std	Y+5, r24	; 0x05
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <LCD_init+0x10e>
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB7_PIN_ID,PIN_OUTPUT);
	/* Send for 4 bit initializations */
	LCD_sendCommand(LCD_GO_HOME);
#elif(LCD_DATA_BITS_MODE==8)
	/* use 8 bits 2lines 5x7 dots mode */
	LCD_sendCommand(LCD_SET_EIGHT_BITS_TWO_LINES_MODE);
    10c6:	88 e3       	ldi	r24, 0x38	; 56
    10c8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <LCD_sendCommand>
	/* set the whole data port as output*/
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
    10cc:	82 e0       	ldi	r24, 0x02	; 2
    10ce:	6f ef       	ldi	r22, 0xFF	; 255
    10d0:	0e 94 09 10 	call	0x2012	; 0x2012 <GPIO_setupPortDirection>
#endif
	/* Turn cursor off and clear screen at the beginning*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    10d4:	8c e0       	ldi	r24, 0x0C	; 12
    10d6:	0e 94 79 08 	call	0x10f2	; 0x10f2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	0e 94 79 08 	call	0x10f2	; 0x10f2 <LCD_sendCommand>
}
    10e0:	2e 96       	adiw	r28, 0x0e	; 14
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command){
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	e9 97       	sbiw	r28, 0x39	; 57
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* command mode rs=0 */
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write mode rw=0 */
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a0 e8       	ldi	r26, 0x80	; 128
    1122:	bf e3       	ldi	r27, 0x3F	; 63
    1124:	8d ab       	std	Y+53, r24	; 0x35
    1126:	9e ab       	std	Y+54, r25	; 0x36
    1128:	af ab       	std	Y+55, r26	; 0x37
    112a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112c:	6d a9       	ldd	r22, Y+53	; 0x35
    112e:	7e a9       	ldd	r23, Y+54	; 0x36
    1130:	8f a9       	ldd	r24, Y+55	; 0x37
    1132:	98 ad       	ldd	r25, Y+56	; 0x38
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a e7       	ldi	r20, 0x7A	; 122
    113a:	53 e4       	ldi	r21, 0x43	; 67
    113c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	89 ab       	std	Y+49, r24	; 0x31
    1146:	9a ab       	std	Y+50, r25	; 0x32
    1148:	ab ab       	std	Y+51, r26	; 0x33
    114a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    114c:	69 a9       	ldd	r22, Y+49	; 0x31
    114e:	7a a9       	ldd	r23, Y+50	; 0x32
    1150:	8b a9       	ldd	r24, Y+51	; 0x33
    1152:	9c a9       	ldd	r25, Y+52	; 0x34
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1160:	88 23       	and	r24, r24
    1162:	2c f4       	brge	.+10     	; 0x116e <LCD_sendCommand+0x7c>
		__ticks = 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	98 ab       	std	Y+48, r25	; 0x30
    116a:	8f a7       	std	Y+47, r24	; 0x2f
    116c:	3f c0       	rjmp	.+126    	; 0x11ec <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    116e:	69 a9       	ldd	r22, Y+49	; 0x31
    1170:	7a a9       	ldd	r23, Y+50	; 0x32
    1172:	8b a9       	ldd	r24, Y+51	; 0x33
    1174:	9c a9       	ldd	r25, Y+52	; 0x34
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	4f e7       	ldi	r20, 0x7F	; 127
    117c:	57 e4       	ldi	r21, 0x47	; 71
    117e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1182:	18 16       	cp	r1, r24
    1184:	4c f5       	brge	.+82     	; 0x11d8 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1186:	6d a9       	ldd	r22, Y+53	; 0x35
    1188:	7e a9       	ldd	r23, Y+54	; 0x36
    118a:	8f a9       	ldd	r24, Y+55	; 0x37
    118c:	98 ad       	ldd	r25, Y+56	; 0x38
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e2       	ldi	r20, 0x20	; 32
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	98 ab       	std	Y+48, r25	; 0x30
    11ac:	8f a7       	std	Y+47, r24	; 0x2f
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <LCD_sendCommand+0xdc>
    11b0:	89 e1       	ldi	r24, 0x19	; 25
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9e a7       	std	Y+46, r25	; 0x2e
    11b6:	8d a7       	std	Y+45, r24	; 0x2d
    11b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    11ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <LCD_sendCommand+0xca>
    11c0:	9e a7       	std	Y+46, r25	; 0x2e
    11c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c6:	98 a9       	ldd	r25, Y+48	; 0x30
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	98 ab       	std	Y+48, r25	; 0x30
    11cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d0:	98 a9       	ldd	r25, Y+48	; 0x30
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	69 f7       	brne	.-38     	; 0x11b0 <LCD_sendCommand+0xbe>
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d8:	69 a9       	ldd	r22, Y+49	; 0x31
    11da:	7a a9       	ldd	r23, Y+50	; 0x32
    11dc:	8b a9       	ldd	r24, Y+51	; 0x33
    11de:	9c a9       	ldd	r25, Y+52	; 0x34
    11e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	98 ab       	std	Y+48, r25	; 0x30
    11ea:	8f a7       	std	Y+47, r24	; 0x2f
    11ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ee:	98 a9       	ldd	r25, Y+48	; 0x30
    11f0:	9c a7       	std	Y+44, r25	; 0x2c
    11f2:	8b a7       	std	Y+43, r24	; 0x2b
    11f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    11f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <LCD_sendCommand+0x106>
    11fc:	9c a7       	std	Y+44, r25	; 0x2c
    11fe:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1); /* delay for processing Tas = 50ns */
    GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* enable E */
    1200:	83 e0       	ldi	r24, 0x03	; 3
    1202:	62 e0       	ldi	r22, 0x02	; 2
    1204:	41 e0       	ldi	r20, 0x01	; 1
    1206:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 e8       	ldi	r26, 0x80	; 128
    1210:	bf e3       	ldi	r27, 0x3F	; 63
    1212:	8f a3       	std	Y+39, r24	; 0x27
    1214:	98 a7       	std	Y+40, r25	; 0x28
    1216:	a9 a7       	std	Y+41, r26	; 0x29
    1218:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121a:	6f a1       	ldd	r22, Y+39	; 0x27
    121c:	78 a5       	ldd	r23, Y+40	; 0x28
    121e:	89 a5       	ldd	r24, Y+41	; 0x29
    1220:	9a a5       	ldd	r25, Y+42	; 0x2a
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4a e7       	ldi	r20, 0x7A	; 122
    1228:	53 e4       	ldi	r21, 0x43	; 67
    122a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8b a3       	std	Y+35, r24	; 0x23
    1234:	9c a3       	std	Y+36, r25	; 0x24
    1236:	ad a3       	std	Y+37, r26	; 0x25
    1238:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    123a:	6b a1       	ldd	r22, Y+35	; 0x23
    123c:	7c a1       	ldd	r23, Y+36	; 0x24
    123e:	8d a1       	ldd	r24, Y+37	; 0x25
    1240:	9e a1       	ldd	r25, Y+38	; 0x26
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    124e:	88 23       	and	r24, r24
    1250:	2c f4       	brge	.+10     	; 0x125c <LCD_sendCommand+0x16a>
		__ticks = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9a a3       	std	Y+34, r25	; 0x22
    1258:	89 a3       	std	Y+33, r24	; 0x21
    125a:	3f c0       	rjmp	.+126    	; 0x12da <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    125c:	6b a1       	ldd	r22, Y+35	; 0x23
    125e:	7c a1       	ldd	r23, Y+36	; 0x24
    1260:	8d a1       	ldd	r24, Y+37	; 0x25
    1262:	9e a1       	ldd	r25, Y+38	; 0x26
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	3f ef       	ldi	r19, 0xFF	; 255
    1268:	4f e7       	ldi	r20, 0x7F	; 127
    126a:	57 e4       	ldi	r21, 0x47	; 71
    126c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1270:	18 16       	cp	r1, r24
    1272:	4c f5       	brge	.+82     	; 0x12c6 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1274:	6f a1       	ldd	r22, Y+39	; 0x27
    1276:	78 a5       	ldd	r23, Y+40	; 0x28
    1278:	89 a5       	ldd	r24, Y+41	; 0x29
    127a:	9a a5       	ldd	r25, Y+42	; 0x2a
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9a a3       	std	Y+34, r25	; 0x22
    129a:	89 a3       	std	Y+33, r24	; 0x21
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <LCD_sendCommand+0x1ca>
    129e:	89 e1       	ldi	r24, 0x19	; 25
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	98 a3       	std	Y+32, r25	; 0x20
    12a4:	8f 8f       	std	Y+31, r24	; 0x1f
    12a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12a8:	98 a1       	ldd	r25, Y+32	; 0x20
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <LCD_sendCommand+0x1b8>
    12ae:	98 a3       	std	Y+32, r25	; 0x20
    12b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	89 a1       	ldd	r24, Y+33	; 0x21
    12b4:	9a a1       	ldd	r25, Y+34	; 0x22
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9a a3       	std	Y+34, r25	; 0x22
    12ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12bc:	89 a1       	ldd	r24, Y+33	; 0x21
    12be:	9a a1       	ldd	r25, Y+34	; 0x22
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	69 f7       	brne	.-38     	; 0x129e <LCD_sendCommand+0x1ac>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c6:	6b a1       	ldd	r22, Y+35	; 0x23
    12c8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ca:	8d a1       	ldd	r24, Y+37	; 0x25
    12cc:	9e a1       	ldd	r25, Y+38	; 0x26
    12ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9a a3       	std	Y+34, r25	; 0x22
    12d8:	89 a3       	std	Y+33, r24	; 0x21
    12da:	89 a1       	ldd	r24, Y+33	; 0x21
    12dc:	9a a1       	ldd	r25, Y+34	; 0x22
    12de:	9e 8f       	std	Y+30, r25	; 0x1e
    12e0:	8d 8f       	std	Y+29, r24	; 0x1d
    12e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <LCD_sendCommand+0x1f4>
    12ea:	9e 8f       	std	Y+30, r25	; 0x1e
    12ec:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,3));
    _delay_ms(1);/* delay for processing Tdsw = 100ns */
    GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* disable E */
    _delay_ms(1); /* delay for processing Th = 13ns */
#elif(LCD_DATA_BITS_MODE==8)
    GPIO_writePort(LCD_DATA_PORT,command); /* out the command to whole data bus */
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	69 ad       	ldd	r22, Y+57	; 0x39
    12f2:	0e 94 4d 10 	call	0x209a	; 0x209a <GPIO_writePort>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a0 e8       	ldi	r26, 0x80	; 128
    12fc:	bf e3       	ldi	r27, 0x3F	; 63
    12fe:	89 8f       	std	Y+25, r24	; 0x19
    1300:	9a 8f       	std	Y+26, r25	; 0x1a
    1302:	ab 8f       	std	Y+27, r26	; 0x1b
    1304:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1306:	69 8d       	ldd	r22, Y+25	; 0x19
    1308:	7a 8d       	ldd	r23, Y+26	; 0x1a
    130a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    130c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	4a e7       	ldi	r20, 0x7A	; 122
    1314:	53 e4       	ldi	r21, 0x43	; 67
    1316:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	8d 8b       	std	Y+21, r24	; 0x15
    1320:	9e 8b       	std	Y+22, r25	; 0x16
    1322:	af 8b       	std	Y+23, r26	; 0x17
    1324:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1326:	6d 89       	ldd	r22, Y+21	; 0x15
    1328:	7e 89       	ldd	r23, Y+22	; 0x16
    132a:	8f 89       	ldd	r24, Y+23	; 0x17
    132c:	98 8d       	ldd	r25, Y+24	; 0x18
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e8       	ldi	r20, 0x80	; 128
    1334:	5f e3       	ldi	r21, 0x3F	; 63
    1336:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    133a:	88 23       	and	r24, r24
    133c:	2c f4       	brge	.+10     	; 0x1348 <LCD_sendCommand+0x256>
		__ticks = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9c 8b       	std	Y+20, r25	; 0x14
    1344:	8b 8b       	std	Y+19, r24	; 0x13
    1346:	3f c0       	rjmp	.+126    	; 0x13c6 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1348:	6d 89       	ldd	r22, Y+21	; 0x15
    134a:	7e 89       	ldd	r23, Y+22	; 0x16
    134c:	8f 89       	ldd	r24, Y+23	; 0x17
    134e:	98 8d       	ldd	r25, Y+24	; 0x18
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	3f ef       	ldi	r19, 0xFF	; 255
    1354:	4f e7       	ldi	r20, 0x7F	; 127
    1356:	57 e4       	ldi	r21, 0x47	; 71
    1358:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    135c:	18 16       	cp	r1, r24
    135e:	4c f5       	brge	.+82     	; 0x13b2 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1360:	69 8d       	ldd	r22, Y+25	; 0x19
    1362:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1364:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1366:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e2       	ldi	r20, 0x20	; 32
    136e:	51 e4       	ldi	r21, 0x41	; 65
    1370:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	9c 8b       	std	Y+20, r25	; 0x14
    1386:	8b 8b       	std	Y+19, r24	; 0x13
    1388:	0f c0       	rjmp	.+30     	; 0x13a8 <LCD_sendCommand+0x2b6>
    138a:	89 e1       	ldi	r24, 0x19	; 25
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9a 8b       	std	Y+18, r25	; 0x12
    1390:	89 8b       	std	Y+17, r24	; 0x11
    1392:	89 89       	ldd	r24, Y+17	; 0x11
    1394:	9a 89       	ldd	r25, Y+18	; 0x12
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <LCD_sendCommand+0x2a4>
    139a:	9a 8b       	std	Y+18, r25	; 0x12
    139c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139e:	8b 89       	ldd	r24, Y+19	; 0x13
    13a0:	9c 89       	ldd	r25, Y+20	; 0x14
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	9c 8b       	std	Y+20, r25	; 0x14
    13a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a8:	8b 89       	ldd	r24, Y+19	; 0x13
    13aa:	9c 89       	ldd	r25, Y+20	; 0x14
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	69 f7       	brne	.-38     	; 0x138a <LCD_sendCommand+0x298>
    13b0:	14 c0       	rjmp	.+40     	; 0x13da <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b2:	6d 89       	ldd	r22, Y+21	; 0x15
    13b4:	7e 89       	ldd	r23, Y+22	; 0x16
    13b6:	8f 89       	ldd	r24, Y+23	; 0x17
    13b8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9c 8b       	std	Y+20, r25	; 0x14
    13c4:	8b 8b       	std	Y+19, r24	; 0x13
    13c6:	8b 89       	ldd	r24, Y+19	; 0x13
    13c8:	9c 89       	ldd	r25, Y+20	; 0x14
    13ca:	98 8b       	std	Y+16, r25	; 0x10
    13cc:	8f 87       	std	Y+15, r24	; 0x0f
    13ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d0:	98 89       	ldd	r25, Y+16	; 0x10
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <LCD_sendCommand+0x2e0>
    13d6:	98 8b       	std	Y+16, r25	; 0x10
    13d8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);/* delay for processing Tdsw = 100ns */
    GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* disable E */
    13da:	83 e0       	ldi	r24, 0x03	; 3
    13dc:	62 e0       	ldi	r22, 0x02	; 2
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a0 e8       	ldi	r26, 0x80	; 128
    13ea:	bf e3       	ldi	r27, 0x3F	; 63
    13ec:	8b 87       	std	Y+11, r24	; 0x0b
    13ee:	9c 87       	std	Y+12, r25	; 0x0c
    13f0:	ad 87       	std	Y+13, r26	; 0x0d
    13f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a e7       	ldi	r20, 0x7A	; 122
    1402:	53 e4       	ldi	r21, 0x43	; 67
    1404:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8f 83       	std	Y+7, r24	; 0x07
    140e:	98 87       	std	Y+8, r25	; 0x08
    1410:	a9 87       	std	Y+9, r26	; 0x09
    1412:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <LCD_sendCommand+0x344>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 83       	std	Y+5, r24	; 0x05
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1436:	6f 81       	ldd	r22, Y+7	; 0x07
    1438:	78 85       	ldd	r23, Y+8	; 0x08
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1450:	7c 85       	ldd	r23, Y+12	; 0x0c
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	9e 85       	ldd	r25, Y+14	; 0x0e
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <LCD_sendCommand+0x3a4>
    1478:	89 e1       	ldi	r24, 0x19	; 25
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	8b 83       	std	Y+3, r24	; 0x03
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <LCD_sendCommand+0x392>
    1488:	9c 83       	std	Y+4, r25	; 0x04
    148a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <LCD_sendCommand+0x386>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <LCD_sendCommand+0x3ce>
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    14c8:	e9 96       	adiw	r28, 0x39	; 57
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data){
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	e9 97       	sbiw	r28, 0x39	; 57
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Display mode rs=1 */
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	41 e0       	ldi	r20, 0x01	; 1
    14f6:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write mode rw=0 */
    14fa:	83 e0       	ldi	r24, 0x03	; 3
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a0 e8       	ldi	r26, 0x80	; 128
    150a:	bf e3       	ldi	r27, 0x3F	; 63
    150c:	8d ab       	std	Y+53, r24	; 0x35
    150e:	9e ab       	std	Y+54, r25	; 0x36
    1510:	af ab       	std	Y+55, r26	; 0x37
    1512:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1514:	6d a9       	ldd	r22, Y+53	; 0x35
    1516:	7e a9       	ldd	r23, Y+54	; 0x36
    1518:	8f a9       	ldd	r24, Y+55	; 0x37
    151a:	98 ad       	ldd	r25, Y+56	; 0x38
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	4a e7       	ldi	r20, 0x7A	; 122
    1522:	53 e4       	ldi	r21, 0x43	; 67
    1524:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	89 ab       	std	Y+49, r24	; 0x31
    152e:	9a ab       	std	Y+50, r25	; 0x32
    1530:	ab ab       	std	Y+51, r26	; 0x33
    1532:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1534:	69 a9       	ldd	r22, Y+49	; 0x31
    1536:	7a a9       	ldd	r23, Y+50	; 0x32
    1538:	8b a9       	ldd	r24, Y+51	; 0x33
    153a:	9c a9       	ldd	r25, Y+52	; 0x34
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e8       	ldi	r20, 0x80	; 128
    1542:	5f e3       	ldi	r21, 0x3F	; 63
    1544:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1548:	88 23       	and	r24, r24
    154a:	2c f4       	brge	.+10     	; 0x1556 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	98 ab       	std	Y+48, r25	; 0x30
    1552:	8f a7       	std	Y+47, r24	; 0x2f
    1554:	3f c0       	rjmp	.+126    	; 0x15d4 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1556:	69 a9       	ldd	r22, Y+49	; 0x31
    1558:	7a a9       	ldd	r23, Y+50	; 0x32
    155a:	8b a9       	ldd	r24, Y+51	; 0x33
    155c:	9c a9       	ldd	r25, Y+52	; 0x34
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	3f ef       	ldi	r19, 0xFF	; 255
    1562:	4f e7       	ldi	r20, 0x7F	; 127
    1564:	57 e4       	ldi	r21, 0x47	; 71
    1566:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    156a:	18 16       	cp	r1, r24
    156c:	4c f5       	brge	.+82     	; 0x15c0 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156e:	6d a9       	ldd	r22, Y+53	; 0x35
    1570:	7e a9       	ldd	r23, Y+54	; 0x36
    1572:	8f a9       	ldd	r24, Y+55	; 0x37
    1574:	98 ad       	ldd	r25, Y+56	; 0x38
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e2       	ldi	r20, 0x20	; 32
    157c:	51 e4       	ldi	r21, 0x41	; 65
    157e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	bc 01       	movw	r22, r24
    1588:	cd 01       	movw	r24, r26
    158a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	98 ab       	std	Y+48, r25	; 0x30
    1594:	8f a7       	std	Y+47, r24	; 0x2f
    1596:	0f c0       	rjmp	.+30     	; 0x15b6 <LCD_displayCharacter+0xdc>
    1598:	89 e1       	ldi	r24, 0x19	; 25
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9e a7       	std	Y+46, r25	; 0x2e
    159e:	8d a7       	std	Y+45, r24	; 0x2d
    15a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    15a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <LCD_displayCharacter+0xca>
    15a8:	9e a7       	std	Y+46, r25	; 0x2e
    15aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ae:	98 a9       	ldd	r25, Y+48	; 0x30
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	98 ab       	std	Y+48, r25	; 0x30
    15b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15b8:	98 a9       	ldd	r25, Y+48	; 0x30
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	69 f7       	brne	.-38     	; 0x1598 <LCD_displayCharacter+0xbe>
    15be:	14 c0       	rjmp	.+40     	; 0x15e8 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c0:	69 a9       	ldd	r22, Y+49	; 0x31
    15c2:	7a a9       	ldd	r23, Y+50	; 0x32
    15c4:	8b a9       	ldd	r24, Y+51	; 0x33
    15c6:	9c a9       	ldd	r25, Y+52	; 0x34
    15c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	98 ab       	std	Y+48, r25	; 0x30
    15d2:	8f a7       	std	Y+47, r24	; 0x2f
    15d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15d6:	98 a9       	ldd	r25, Y+48	; 0x30
    15d8:	9c a7       	std	Y+44, r25	; 0x2c
    15da:	8b a7       	std	Y+43, r24	; 0x2b
    15dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    15de:	9c a5       	ldd	r25, Y+44	; 0x2c
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <LCD_displayCharacter+0x106>
    15e4:	9c a7       	std	Y+44, r25	; 0x2c
    15e6:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1); /* delay for processing Tas = 50ns */
    GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* enable E */
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	62 e0       	ldi	r22, 0x02	; 2
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a0 e8       	ldi	r26, 0x80	; 128
    15f8:	bf e3       	ldi	r27, 0x3F	; 63
    15fa:	8f a3       	std	Y+39, r24	; 0x27
    15fc:	98 a7       	std	Y+40, r25	; 0x28
    15fe:	a9 a7       	std	Y+41, r26	; 0x29
    1600:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1602:	6f a1       	ldd	r22, Y+39	; 0x27
    1604:	78 a5       	ldd	r23, Y+40	; 0x28
    1606:	89 a5       	ldd	r24, Y+41	; 0x29
    1608:	9a a5       	ldd	r25, Y+42	; 0x2a
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	4a e7       	ldi	r20, 0x7A	; 122
    1610:	53 e4       	ldi	r21, 0x43	; 67
    1612:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	8b a3       	std	Y+35, r24	; 0x23
    161c:	9c a3       	std	Y+36, r25	; 0x24
    161e:	ad a3       	std	Y+37, r26	; 0x25
    1620:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1622:	6b a1       	ldd	r22, Y+35	; 0x23
    1624:	7c a1       	ldd	r23, Y+36	; 0x24
    1626:	8d a1       	ldd	r24, Y+37	; 0x25
    1628:	9e a1       	ldd	r25, Y+38	; 0x26
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e8       	ldi	r20, 0x80	; 128
    1630:	5f e3       	ldi	r21, 0x3F	; 63
    1632:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1636:	88 23       	and	r24, r24
    1638:	2c f4       	brge	.+10     	; 0x1644 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9a a3       	std	Y+34, r25	; 0x22
    1640:	89 a3       	std	Y+33, r24	; 0x21
    1642:	3f c0       	rjmp	.+126    	; 0x16c2 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1644:	6b a1       	ldd	r22, Y+35	; 0x23
    1646:	7c a1       	ldd	r23, Y+36	; 0x24
    1648:	8d a1       	ldd	r24, Y+37	; 0x25
    164a:	9e a1       	ldd	r25, Y+38	; 0x26
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	3f ef       	ldi	r19, 0xFF	; 255
    1650:	4f e7       	ldi	r20, 0x7F	; 127
    1652:	57 e4       	ldi	r21, 0x47	; 71
    1654:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1658:	18 16       	cp	r1, r24
    165a:	4c f5       	brge	.+82     	; 0x16ae <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165c:	6f a1       	ldd	r22, Y+39	; 0x27
    165e:	78 a5       	ldd	r23, Y+40	; 0x28
    1660:	89 a5       	ldd	r24, Y+41	; 0x29
    1662:	9a a5       	ldd	r25, Y+42	; 0x2a
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9a a3       	std	Y+34, r25	; 0x22
    1682:	89 a3       	std	Y+33, r24	; 0x21
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <LCD_displayCharacter+0x1ca>
    1686:	89 e1       	ldi	r24, 0x19	; 25
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	98 a3       	std	Y+32, r25	; 0x20
    168c:	8f 8f       	std	Y+31, r24	; 0x1f
    168e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1690:	98 a1       	ldd	r25, Y+32	; 0x20
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <LCD_displayCharacter+0x1b8>
    1696:	98 a3       	std	Y+32, r25	; 0x20
    1698:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169a:	89 a1       	ldd	r24, Y+33	; 0x21
    169c:	9a a1       	ldd	r25, Y+34	; 0x22
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	9a a3       	std	Y+34, r25	; 0x22
    16a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a4:	89 a1       	ldd	r24, Y+33	; 0x21
    16a6:	9a a1       	ldd	r25, Y+34	; 0x22
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	69 f7       	brne	.-38     	; 0x1686 <LCD_displayCharacter+0x1ac>
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ae:	6b a1       	ldd	r22, Y+35	; 0x23
    16b0:	7c a1       	ldd	r23, Y+36	; 0x24
    16b2:	8d a1       	ldd	r24, Y+37	; 0x25
    16b4:	9e a1       	ldd	r25, Y+38	; 0x26
    16b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9a a3       	std	Y+34, r25	; 0x22
    16c0:	89 a3       	std	Y+33, r24	; 0x21
    16c2:	89 a1       	ldd	r24, Y+33	; 0x21
    16c4:	9a a1       	ldd	r25, Y+34	; 0x22
    16c6:	9e 8f       	std	Y+30, r25	; 0x1e
    16c8:	8d 8f       	std	Y+29, r24	; 0x1d
    16ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <LCD_displayCharacter+0x1f4>
    16d2:	9e 8f       	std	Y+30, r25	; 0x1e
    16d4:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(data,3));
    _delay_ms(1);/* delay for processing Tdsw = 100ns */
    GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* disable E */
    _delay_ms(1); /* delay for processing Th = 13ns */
#elif(LCD_DATA_BITS_MODE==8)
    GPIO_writePort(LCD_DATA_PORT,data); /* out the command to whole data bus */
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	69 ad       	ldd	r22, Y+57	; 0x39
    16da:	0e 94 4d 10 	call	0x209a	; 0x209a <GPIO_writePort>
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a0 e8       	ldi	r26, 0x80	; 128
    16e4:	bf e3       	ldi	r27, 0x3F	; 63
    16e6:	89 8f       	std	Y+25, r24	; 0x19
    16e8:	9a 8f       	std	Y+26, r25	; 0x1a
    16ea:	ab 8f       	std	Y+27, r26	; 0x1b
    16ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ee:	69 8d       	ldd	r22, Y+25	; 0x19
    16f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	4a e7       	ldi	r20, 0x7A	; 122
    16fc:	53 e4       	ldi	r21, 0x43	; 67
    16fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	8d 8b       	std	Y+21, r24	; 0x15
    1708:	9e 8b       	std	Y+22, r25	; 0x16
    170a:	af 8b       	std	Y+23, r26	; 0x17
    170c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    170e:	6d 89       	ldd	r22, Y+21	; 0x15
    1710:	7e 89       	ldd	r23, Y+22	; 0x16
    1712:	8f 89       	ldd	r24, Y+23	; 0x17
    1714:	98 8d       	ldd	r25, Y+24	; 0x18
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e8       	ldi	r20, 0x80	; 128
    171c:	5f e3       	ldi	r21, 0x3F	; 63
    171e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1722:	88 23       	and	r24, r24
    1724:	2c f4       	brge	.+10     	; 0x1730 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	9c 8b       	std	Y+20, r25	; 0x14
    172c:	8b 8b       	std	Y+19, r24	; 0x13
    172e:	3f c0       	rjmp	.+126    	; 0x17ae <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1730:	6d 89       	ldd	r22, Y+21	; 0x15
    1732:	7e 89       	ldd	r23, Y+22	; 0x16
    1734:	8f 89       	ldd	r24, Y+23	; 0x17
    1736:	98 8d       	ldd	r25, Y+24	; 0x18
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	3f ef       	ldi	r19, 0xFF	; 255
    173c:	4f e7       	ldi	r20, 0x7F	; 127
    173e:	57 e4       	ldi	r21, 0x47	; 71
    1740:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1744:	18 16       	cp	r1, r24
    1746:	4c f5       	brge	.+82     	; 0x179a <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1748:	69 8d       	ldd	r22, Y+25	; 0x19
    174a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    174c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    174e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e2       	ldi	r20, 0x20	; 32
    1756:	51 e4       	ldi	r21, 0x41	; 65
    1758:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	bc 01       	movw	r22, r24
    1762:	cd 01       	movw	r24, r26
    1764:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	9c 8b       	std	Y+20, r25	; 0x14
    176e:	8b 8b       	std	Y+19, r24	; 0x13
    1770:	0f c0       	rjmp	.+30     	; 0x1790 <LCD_displayCharacter+0x2b6>
    1772:	89 e1       	ldi	r24, 0x19	; 25
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9a 8b       	std	Y+18, r25	; 0x12
    1778:	89 8b       	std	Y+17, r24	; 0x11
    177a:	89 89       	ldd	r24, Y+17	; 0x11
    177c:	9a 89       	ldd	r25, Y+18	; 0x12
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <LCD_displayCharacter+0x2a4>
    1782:	9a 8b       	std	Y+18, r25	; 0x12
    1784:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1786:	8b 89       	ldd	r24, Y+19	; 0x13
    1788:	9c 89       	ldd	r25, Y+20	; 0x14
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	9c 8b       	std	Y+20, r25	; 0x14
    178e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1790:	8b 89       	ldd	r24, Y+19	; 0x13
    1792:	9c 89       	ldd	r25, Y+20	; 0x14
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	69 f7       	brne	.-38     	; 0x1772 <LCD_displayCharacter+0x298>
    1798:	14 c0       	rjmp	.+40     	; 0x17c2 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179a:	6d 89       	ldd	r22, Y+21	; 0x15
    179c:	7e 89       	ldd	r23, Y+22	; 0x16
    179e:	8f 89       	ldd	r24, Y+23	; 0x17
    17a0:	98 8d       	ldd	r25, Y+24	; 0x18
    17a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	9c 8b       	std	Y+20, r25	; 0x14
    17ac:	8b 8b       	std	Y+19, r24	; 0x13
    17ae:	8b 89       	ldd	r24, Y+19	; 0x13
    17b0:	9c 89       	ldd	r25, Y+20	; 0x14
    17b2:	98 8b       	std	Y+16, r25	; 0x10
    17b4:	8f 87       	std	Y+15, r24	; 0x0f
    17b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b8:	98 89       	ldd	r25, Y+16	; 0x10
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <LCD_displayCharacter+0x2e0>
    17be:	98 8b       	std	Y+16, r25	; 0x10
    17c0:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);/* delay for processing Tdsw = 100ns */
    GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* disable E */
    17c2:	83 e0       	ldi	r24, 0x03	; 3
    17c4:	62 e0       	ldi	r22, 0x02	; 2
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GPIO_writePin>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a0 e8       	ldi	r26, 0x80	; 128
    17d2:	bf e3       	ldi	r27, 0x3F	; 63
    17d4:	8b 87       	std	Y+11, r24	; 0x0b
    17d6:	9c 87       	std	Y+12, r25	; 0x0c
    17d8:	ad 87       	std	Y+13, r26	; 0x0d
    17da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17de:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a e7       	ldi	r20, 0x7A	; 122
    17ea:	53 e4       	ldi	r21, 0x43	; 67
    17ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	8f 83       	std	Y+7, r24	; 0x07
    17f6:	98 87       	std	Y+8, r25	; 0x08
    17f8:	a9 87       	std	Y+9, r26	; 0x09
    17fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17fc:	6f 81       	ldd	r22, Y+7	; 0x07
    17fe:	78 85       	ldd	r23, Y+8	; 0x08
    1800:	89 85       	ldd	r24, Y+9	; 0x09
    1802:	9a 85       	ldd	r25, Y+10	; 0x0a
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f e3       	ldi	r21, 0x3F	; 63
    180c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1810:	88 23       	and	r24, r24
    1812:	2c f4       	brge	.+10     	; 0x181e <LCD_displayCharacter+0x344>
		__ticks = 1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9e 83       	std	Y+6, r25	; 0x06
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	3f c0       	rjmp	.+126    	; 0x189c <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    181e:	6f 81       	ldd	r22, Y+7	; 0x07
    1820:	78 85       	ldd	r23, Y+8	; 0x08
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	4c f5       	brge	.+82     	; 0x1888 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1836:	6b 85       	ldd	r22, Y+11	; 0x0b
    1838:	7c 85       	ldd	r23, Y+12	; 0x0c
    183a:	8d 85       	ldd	r24, Y+13	; 0x0d
    183c:	9e 85       	ldd	r25, Y+14	; 0x0e
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e2       	ldi	r20, 0x20	; 32
    1844:	51 e4       	ldi	r21, 0x41	; 65
    1846:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9e 83       	std	Y+6, r25	; 0x06
    185c:	8d 83       	std	Y+5, r24	; 0x05
    185e:	0f c0       	rjmp	.+30     	; 0x187e <LCD_displayCharacter+0x3a4>
    1860:	89 e1       	ldi	r24, 0x19	; 25
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9c 83       	std	Y+4, r25	; 0x04
    1866:	8b 83       	std	Y+3, r24	; 0x03
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD_displayCharacter+0x392>
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	9e 83       	std	Y+6, r25	; 0x06
    187c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	69 f7       	brne	.-38     	; 0x1860 <LCD_displayCharacter+0x386>
    1886:	14 c0       	rjmp	.+40     	; 0x18b0 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1888:	6f 81       	ldd	r22, Y+7	; 0x07
    188a:	78 85       	ldd	r23, Y+8	; 0x08
    188c:	89 85       	ldd	r24, Y+9	; 0x09
    188e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1890:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	9e 83       	std	Y+6, r25	; 0x06
    189a:	8d 83       	std	Y+5, r24	; 0x05
    189c:	8d 81       	ldd	r24, Y+5	; 0x05
    189e:	9e 81       	ldd	r25, Y+6	; 0x06
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <LCD_displayCharacter+0x3ce>
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    18b0:	e9 96       	adiw	r28, 0x39	; 57
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str){
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <LCD_displayString+0x6>
    18c8:	0f 92       	push	r0
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	9b 83       	std	Y+3, r25	; 0x03
    18d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    18d2:	19 82       	std	Y+1, r1	; 0x01
    18d4:	0e c0       	rjmp	.+28     	; 0x18f2 <LCD_displayString+0x30>
	while(str[i]!='\0')
	{
		LCD_displayCharacter(str[i]);
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	9b 81       	ldd	r25, Y+3	; 0x03
    18e0:	fc 01       	movw	r30, r24
    18e2:	e2 0f       	add	r30, r18
    18e4:	f3 1f       	adc	r31, r19
    18e6:	80 81       	ld	r24, Z
    18e8:	0e 94 6d 0a 	call	0x14da	; 0x14da <LCD_displayCharacter>
		i++;
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	8f 5f       	subi	r24, 0xFF	; 255
    18f0:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str){
	uint8 i =0;
	while(str[i]!='\0')
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	9b 81       	ldd	r25, Y+3	; 0x03
    18fc:	fc 01       	movw	r30, r24
    18fe:	e2 0f       	add	r30, r18
    1900:	f3 1f       	adc	r31, r19
    1902:	80 81       	ld	r24, Z
    1904:	88 23       	and	r24, r24
    1906:	39 f7       	brne	.-50     	; 0x18d6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 column){
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <LCD_moveCursor+0x6>
    191a:	00 d0       	rcall	.+0      	; 0x191c <LCD_moveCursor+0x8>
    191c:	0f 92       	push	r0
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	8a 83       	std	Y+2, r24	; 0x02
    1924:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memmory_address;
	/* calculate the required cursor address */
	switch(row){
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3d 83       	std	Y+5, r19	; 0x05
    192e:	2c 83       	std	Y+4, r18	; 0x04
    1930:	8c 81       	ldd	r24, Y+4	; 0x04
    1932:	9d 81       	ldd	r25, Y+5	; 0x05
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	91 05       	cpc	r25, r1
    1938:	c1 f0       	breq	.+48     	; 0x196a <LCD_moveCursor+0x56>
    193a:	2c 81       	ldd	r18, Y+4	; 0x04
    193c:	3d 81       	ldd	r19, Y+5	; 0x05
    193e:	22 30       	cpi	r18, 0x02	; 2
    1940:	31 05       	cpc	r19, r1
    1942:	2c f4       	brge	.+10     	; 0x194e <LCD_moveCursor+0x3a>
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	9d 81       	ldd	r25, Y+5	; 0x05
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	61 f0       	breq	.+24     	; 0x1964 <LCD_moveCursor+0x50>
    194c:	19 c0       	rjmp	.+50     	; 0x1980 <LCD_moveCursor+0x6c>
    194e:	2c 81       	ldd	r18, Y+4	; 0x04
    1950:	3d 81       	ldd	r19, Y+5	; 0x05
    1952:	22 30       	cpi	r18, 0x02	; 2
    1954:	31 05       	cpc	r19, r1
    1956:	69 f0       	breq	.+26     	; 0x1972 <LCD_moveCursor+0x5e>
    1958:	8c 81       	ldd	r24, Y+4	; 0x04
    195a:	9d 81       	ldd	r25, Y+5	; 0x05
    195c:	83 30       	cpi	r24, 0x03	; 3
    195e:	91 05       	cpc	r25, r1
    1960:	61 f0       	breq	.+24     	; 0x197a <LCD_moveCursor+0x66>
    1962:	0e c0       	rjmp	.+28     	; 0x1980 <LCD_moveCursor+0x6c>
	case 0:
		lcd_memmory_address=column;
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	0b c0       	rjmp	.+22     	; 0x1980 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memmory_address=column+0x40;
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	80 5c       	subi	r24, 0xC0	; 192
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	07 c0       	rjmp	.+14     	; 0x1980 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memmory_address=column+0x10;
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	80 5f       	subi	r24, 0xF0	; 240
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	03 c0       	rjmp	.+6      	; 0x1980 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memmory_address=column+0x50;
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	80 5b       	subi	r24, 0xB0	; 176
    197e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memmory_address|LCD_SET_CURSOR_LOCATION);
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	80 68       	ori	r24, 0x80	; 128
    1984:	0e 94 79 08 	call	0x10f2	; 0x10f2 <LCD_sendCommand>
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 column,const char *str){
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <LCD_displayStringRowColumn+0x6>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <LCD_displayStringRowColumn+0x8>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	6a 83       	std	Y+2, r22	; 0x02
    19a8:	5c 83       	std	Y+4, r21	; 0x04
    19aa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column); /* go to this specific address */
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	6a 81       	ldd	r22, Y+2	; 0x02
    19b0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
	LCD_displayString(str); /* display */
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_displayString>
}
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data){
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	62 97       	sbiw	r28, 0x12	; 18
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	9a 8b       	std	Y+18, r25	; 0x12
    19e0:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* to hold the asci result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    19e2:	89 89       	ldd	r24, Y+17	; 0x11
    19e4:	9a 89       	ldd	r25, Y+18	; 0x12
    19e6:	9e 01       	movw	r18, r28
    19e8:	2f 5f       	subi	r18, 0xFF	; 255
    19ea:	3f 4f       	sbci	r19, 0xFF	; 255
    19ec:	b9 01       	movw	r22, r18
    19ee:	4a e0       	ldi	r20, 0x0A	; 10
    19f0:	50 e0       	ldi	r21, 0x00	; 0
    19f2:	0e 94 11 12 	call	0x2422	; 0x2422 <itoa>
	LCD_displayString(buff); /* to display */
    19f6:	ce 01       	movw	r24, r28
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_displayString>
}
    19fe:	62 96       	adiw	r28, 0x12	; 18
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void){
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <LCD_sendCommand>
}
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <LM35_GetTemperature>:
/* functions definitions */
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_GetTemperature(void){
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <LM35_GetTemperature+0x6>
    1a2a:	0f 92       	push	r0
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value=0;
    1a30:	1b 82       	std	Y+3, r1	; 0x03
	uint16 adc_value=0;
    1a32:	1a 82       	std	Y+2, r1	; 0x02
    1a34:	19 82       	std	Y+1, r1	; 0x01
	adc_value=ADC_readChannel(CHANNEL_ID);
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_readChannel>
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
	temp_value = (uint8)(((uint32)adc_value*LM35_MAX_TEMP*ADC_VOLT)/(ADC_MAX_VALUE*LM35_MAX_VOLT));
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	9a 81       	ldd	r25, Y+2	; 0x02
    1a44:	cc 01       	movw	r24, r24
    1a46:	a0 e0       	ldi	r26, 0x00	; 0
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	26 e9       	ldi	r18, 0x96	; 150
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 bb 11 	call	0x2376	; 0x2376 <__mulsi3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	bc 01       	movw	r22, r24
    1a6c:	cd 01       	movw	r24, r26
    1a6e:	2a e0       	ldi	r18, 0x0A	; 10
    1a70:	37 ed       	ldi	r19, 0xD7	; 215
    1a72:	43 e2       	ldi	r20, 0x23	; 35
    1a74:	50 e4       	ldi	r21, 0x40	; 64
    1a76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 ed       	ldi	r19, 0xD0	; 208
    1a86:	4f eb       	ldi	r20, 0xBF	; 191
    1a88:	54 e4       	ldi	r21, 0x44	; 68
    1a8a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
	return temp_value;
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <PWM_Timer0_Start>:
Setup the prescaler with F_CPU/8.
Setup the compare value based on the required input duty cycle
Setup the direction for OC0 as output pin through the GPIO driver.
The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */
void PWM_Timer0_Start(uint8 duty_cycle){
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <PWM_Timer0_Start+0x6>
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	8a 83       	std	Y+2, r24	; 0x02
	GPIO_setupPinDirection(TIMER0_OCO_PORT_ID,TIMER0_OCO_PIN_ID,PIN_OUTPUT);
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	63 e0       	ldi	r22, 0x03	; 3
    1abe:	41 e0       	ldi	r20, 0x01	; 1
    1ac0:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <GPIO_setupPinDirection>
	TCNT0 = 0; //Set Timer Initial value
    1ac4:	e2 e5       	ldi	r30, 0x52	; 82
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	10 82       	st	Z, r1
	uint8 speed = (((float)duty_cycle/100)*255);
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e0       	ldi	r26, 0x00	; 0
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	48 ec       	ldi	r20, 0xC8	; 200
    1aea:	52 e4       	ldi	r21, 0x42	; 66
    1aec:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	53 e4       	ldi	r21, 0x43	; 67
    1b00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	89 83       	std	Y+1, r24	; 0x01
	OCR0  = speed; // Set Compare Value
    1b16:	ec e5       	ldi	r30, 0x5C	; 92
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	80 83       	st	Z, r24
	TCCR0 = (1<<WGM00) |(1<<WGM01) |(1<<COM01) |(1<<CS01);
    1b1e:	e3 e5       	ldi	r30, 0x53	; 83
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	8a e6       	ldi	r24, 0x6A	; 106
    1b24:	80 83       	st	Z, r24
}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <GPIO_setupPinDirection>:

/* Description
 * It setup the pin direction (input or output)
 * if the port or pin number isn't correct , The function will not handle the
request.  */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <GPIO_setupPinDirection+0x6>
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <GPIO_setupPinDirection+0x8>
    1b38:	0f 92       	push	r0
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	6a 83       	std	Y+2, r22	; 0x02
    1b42:	4b 83       	std	Y+3, r20	; 0x03
	/* checks the input number of port or pin has exceeded the limit number */
	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS))
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	84 30       	cpi	r24, 0x04	; 4
    1b48:	08 f0       	brcs	.+2      	; 0x1b4c <GPIO_setupPinDirection+0x1c>
    1b4a:	d5 c0       	rjmp	.+426    	; 0x1cf6 <GPIO_setupPinDirection+0x1c6>
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	88 30       	cpi	r24, 0x08	; 8
    1b50:	08 f0       	brcs	.+2      	; 0x1b54 <GPIO_setupPinDirection+0x24>
    1b52:	d1 c0       	rjmp	.+418    	; 0x1cf6 <GPIO_setupPinDirection+0x1c6>
		/* nothing to do */
	}
	else
	{
		/* setup the required pin */
		switch(port_num)
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	3d 83       	std	Y+5, r19	; 0x05
    1b5c:	2c 83       	std	Y+4, r18	; 0x04
    1b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b60:	9d 81       	ldd	r25, Y+5	; 0x05
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	91 05       	cpc	r25, r1
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <GPIO_setupPinDirection+0x3a>
    1b68:	43 c0       	rjmp	.+134    	; 0x1bf0 <GPIO_setupPinDirection+0xc0>
    1b6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b6e:	22 30       	cpi	r18, 0x02	; 2
    1b70:	31 05       	cpc	r19, r1
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <GPIO_setupPinDirection+0x4e>
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	9d 81       	ldd	r25, Y+5	; 0x05
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	71 f0       	breq	.+28     	; 0x1b98 <GPIO_setupPinDirection+0x68>
    1b7c:	bc c0       	rjmp	.+376    	; 0x1cf6 <GPIO_setupPinDirection+0x1c6>
    1b7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b80:	3d 81       	ldd	r19, Y+5	; 0x05
    1b82:	22 30       	cpi	r18, 0x02	; 2
    1b84:	31 05       	cpc	r19, r1
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <GPIO_setupPinDirection+0x5a>
    1b88:	5f c0       	rjmp	.+190    	; 0x1c48 <GPIO_setupPinDirection+0x118>
    1b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8e:	83 30       	cpi	r24, 0x03	; 3
    1b90:	91 05       	cpc	r25, r1
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <GPIO_setupPinDirection+0x66>
    1b94:	85 c0       	rjmp	.+266    	; 0x1ca0 <GPIO_setupPinDirection+0x170>
    1b96:	af c0       	rjmp	.+350    	; 0x1cf6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction==PIN_OUTPUT)
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	a1 f4       	brne	.+40     	; 0x1bc6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b9e:	aa e3       	ldi	r26, 0x3A	; 58
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	ea e3       	ldi	r30, 0x3A	; 58
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	02 2e       	mov	r0, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <GPIO_setupPinDirection+0x8c>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	0a 94       	dec	r0
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <GPIO_setupPinDirection+0x88>
    1bc0:	84 2b       	or	r24, r20
    1bc2:	8c 93       	st	X, r24
    1bc4:	98 c0       	rjmp	.+304    	; 0x1cf6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1bc6:	aa e3       	ldi	r26, 0x3A	; 58
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	ea e3       	ldi	r30, 0x3A	; 58
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <GPIO_setupPinDirection+0xb4>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <GPIO_setupPinDirection+0xb0>
    1be8:	80 95       	com	r24
    1bea:	84 23       	and	r24, r20
    1bec:	8c 93       	st	X, r24
    1bee:	83 c0       	rjmp	.+262    	; 0x1cf6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction==PIN_OUTPUT)
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	a1 f4       	brne	.+40     	; 0x1c1e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1bf6:	a7 e3       	ldi	r26, 0x37	; 55
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e7 e3       	ldi	r30, 0x37	; 55
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	48 2f       	mov	r20, r24
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	02 2e       	mov	r0, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <GPIO_setupPinDirection+0xe4>
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <GPIO_setupPinDirection+0xe0>
    1c18:	84 2b       	or	r24, r20
    1c1a:	8c 93       	st	X, r24
    1c1c:	6c c0       	rjmp	.+216    	; 0x1cf6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c1e:	a7 e3       	ldi	r26, 0x37	; 55
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e7 e3       	ldi	r30, 0x37	; 55
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	48 2f       	mov	r20, r24
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	02 2e       	mov	r0, r18
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <GPIO_setupPinDirection+0x10c>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	0a 94       	dec	r0
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <GPIO_setupPinDirection+0x108>
    1c40:	80 95       	com	r24
    1c42:	84 23       	and	r24, r20
    1c44:	8c 93       	st	X, r24
    1c46:	57 c0       	rjmp	.+174    	; 0x1cf6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction==PIN_OUTPUT)
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	a1 f4       	brne	.+40     	; 0x1c76 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1c4e:	a4 e3       	ldi	r26, 0x34	; 52
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e4 e3       	ldi	r30, 0x34	; 52
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	48 2f       	mov	r20, r24
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	02 2e       	mov	r0, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <GPIO_setupPinDirection+0x13c>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	0a 94       	dec	r0
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <GPIO_setupPinDirection+0x138>
    1c70:	84 2b       	or	r24, r20
    1c72:	8c 93       	st	X, r24
    1c74:	40 c0       	rjmp	.+128    	; 0x1cf6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1c76:	a4 e3       	ldi	r26, 0x34	; 52
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e4 e3       	ldi	r30, 0x34	; 52
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	48 2f       	mov	r20, r24
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	02 2e       	mov	r0, r18
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <GPIO_setupPinDirection+0x164>
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	0a 94       	dec	r0
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <GPIO_setupPinDirection+0x160>
    1c98:	80 95       	com	r24
    1c9a:	84 23       	and	r24, r20
    1c9c:	8c 93       	st	X, r24
    1c9e:	2b c0       	rjmp	.+86     	; 0x1cf6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction==PIN_OUTPUT)
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	a1 f4       	brne	.+40     	; 0x1cce <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1ca6:	a1 e3       	ldi	r26, 0x31	; 49
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e1 e3       	ldi	r30, 0x31	; 49
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <GPIO_setupPinDirection+0x194>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <GPIO_setupPinDirection+0x190>
    1cc8:	84 2b       	or	r24, r20
    1cca:	8c 93       	st	X, r24
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1cce:	a1 e3       	ldi	r26, 0x31	; 49
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e1 e3       	ldi	r30, 0x31	; 49
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 2e       	mov	r0, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <GPIO_setupPinDirection+0x1bc>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <GPIO_setupPinDirection+0x1b8>
    1cf0:	80 95       	com	r24
    1cf2:	84 23       	and	r24, r20
    1cf4:	8c 93       	st	X, r24
			}
			break;
		}
	}

}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <GPIO_writePin>:
/* Description
It Writes the value Logic High or Logic Low on the required pin.
If the input port number or pin number are not correct, The function will not handle the
request.
If the pin is input, this function will enable/disable the internal pull-up resistor.  */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <GPIO_writePin+0x6>
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <GPIO_writePin+0x8>
    1d0e:	0f 92       	push	r0
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	6a 83       	std	Y+2, r22	; 0x02
    1d18:	4b 83       	std	Y+3, r20	; 0x03
	/* checks the input number of port or pin has exceeded the limit number */
	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS))
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	08 f0       	brcs	.+2      	; 0x1d22 <GPIO_writePin+0x1c>
    1d20:	d5 c0       	rjmp	.+426    	; 0x1ecc <GPIO_writePin+0x1c6>
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	88 30       	cpi	r24, 0x08	; 8
    1d26:	08 f0       	brcs	.+2      	; 0x1d2a <GPIO_writePin+0x24>
    1d28:	d1 c0       	rjmp	.+418    	; 0x1ecc <GPIO_writePin+0x1c6>
		/* nothing to do */
	}
	else
	{
		/* write the value to the required pin */
		switch(port_num)
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	3d 83       	std	Y+5, r19	; 0x05
    1d32:	2c 83       	std	Y+4, r18	; 0x04
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	9d 81       	ldd	r25, Y+5	; 0x05
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <GPIO_writePin+0x3a>
    1d3e:	43 c0       	rjmp	.+134    	; 0x1dc6 <GPIO_writePin+0xc0>
    1d40:	2c 81       	ldd	r18, Y+4	; 0x04
    1d42:	3d 81       	ldd	r19, Y+5	; 0x05
    1d44:	22 30       	cpi	r18, 0x02	; 2
    1d46:	31 05       	cpc	r19, r1
    1d48:	2c f4       	brge	.+10     	; 0x1d54 <GPIO_writePin+0x4e>
    1d4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	71 f0       	breq	.+28     	; 0x1d6e <GPIO_writePin+0x68>
    1d52:	bc c0       	rjmp	.+376    	; 0x1ecc <GPIO_writePin+0x1c6>
    1d54:	2c 81       	ldd	r18, Y+4	; 0x04
    1d56:	3d 81       	ldd	r19, Y+5	; 0x05
    1d58:	22 30       	cpi	r18, 0x02	; 2
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <GPIO_writePin+0x5a>
    1d5e:	5f c0       	rjmp	.+190    	; 0x1e1e <GPIO_writePin+0x118>
    1d60:	8c 81       	ldd	r24, Y+4	; 0x04
    1d62:	9d 81       	ldd	r25, Y+5	; 0x05
    1d64:	83 30       	cpi	r24, 0x03	; 3
    1d66:	91 05       	cpc	r25, r1
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <GPIO_writePin+0x66>
    1d6a:	85 c0       	rjmp	.+266    	; 0x1e76 <GPIO_writePin+0x170>
    1d6c:	af c0       	rjmp	.+350    	; 0x1ecc <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH)
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	a1 f4       	brne	.+40     	; 0x1d9c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1d74:	ab e3       	ldi	r26, 0x3B	; 59
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	eb e3       	ldi	r30, 0x3B	; 59
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	02 2e       	mov	r0, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <GPIO_writePin+0x8c>
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	0a 94       	dec	r0
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <GPIO_writePin+0x88>
    1d96:	84 2b       	or	r24, r20
    1d98:	8c 93       	st	X, r24
    1d9a:	98 c0       	rjmp	.+304    	; 0x1ecc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d9c:	ab e3       	ldi	r26, 0x3B	; 59
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	eb e3       	ldi	r30, 0x3B	; 59
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <GPIO_writePin+0xb4>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <GPIO_writePin+0xb0>
    1dbe:	80 95       	com	r24
    1dc0:	84 23       	and	r24, r20
    1dc2:	8c 93       	st	X, r24
    1dc4:	83 c0       	rjmp	.+262    	; 0x1ecc <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value==LOGIC_HIGH)
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	a1 f4       	brne	.+40     	; 0x1df4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1dcc:	a8 e3       	ldi	r26, 0x38	; 56
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e8 e3       	ldi	r30, 0x38	; 56
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 2e       	mov	r0, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <GPIO_writePin+0xe4>
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	0a 94       	dec	r0
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <GPIO_writePin+0xe0>
    1dee:	84 2b       	or	r24, r20
    1df0:	8c 93       	st	X, r24
    1df2:	6c c0       	rjmp	.+216    	; 0x1ecc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1df4:	a8 e3       	ldi	r26, 0x38	; 56
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e8 e3       	ldi	r30, 0x38	; 56
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	48 2f       	mov	r20, r24
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 2e       	mov	r0, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <GPIO_writePin+0x10c>
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	0a 94       	dec	r0
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <GPIO_writePin+0x108>
    1e16:	80 95       	com	r24
    1e18:	84 23       	and	r24, r20
    1e1a:	8c 93       	st	X, r24
    1e1c:	57 c0       	rjmp	.+174    	; 0x1ecc <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value==LOGIC_HIGH)
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	a1 f4       	brne	.+40     	; 0x1e4c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1e24:	a5 e3       	ldi	r26, 0x35	; 53
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e5 e3       	ldi	r30, 0x35	; 53
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	48 2f       	mov	r20, r24
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 2e       	mov	r0, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <GPIO_writePin+0x13c>
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	0a 94       	dec	r0
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <GPIO_writePin+0x138>
    1e46:	84 2b       	or	r24, r20
    1e48:	8c 93       	st	X, r24
    1e4a:	40 c0       	rjmp	.+128    	; 0x1ecc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1e4c:	a5 e3       	ldi	r26, 0x35	; 53
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e5 e3       	ldi	r30, 0x35	; 53
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	02 2e       	mov	r0, r18
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <GPIO_writePin+0x164>
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	0a 94       	dec	r0
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <GPIO_writePin+0x160>
    1e6e:	80 95       	com	r24
    1e70:	84 23       	and	r24, r20
    1e72:	8c 93       	st	X, r24
    1e74:	2b c0       	rjmp	.+86     	; 0x1ecc <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value==LOGIC_HIGH)
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	a1 f4       	brne	.+40     	; 0x1ea4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1e7c:	a2 e3       	ldi	r26, 0x32	; 50
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e2 e3       	ldi	r30, 0x32	; 50
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	48 2f       	mov	r20, r24
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 2e       	mov	r0, r18
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <GPIO_writePin+0x194>
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	0a 94       	dec	r0
    1e9c:	e2 f7       	brpl	.-8      	; 0x1e96 <GPIO_writePin+0x190>
    1e9e:	84 2b       	or	r24, r20
    1ea0:	8c 93       	st	X, r24
    1ea2:	14 c0       	rjmp	.+40     	; 0x1ecc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ea4:	a2 e3       	ldi	r26, 0x32	; 50
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e2 e3       	ldi	r30, 0x32	; 50
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	48 2f       	mov	r20, r24
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 2e       	mov	r0, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <GPIO_writePin+0x1bc>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <GPIO_writePin+0x1b8>
    1ec6:	80 95       	com	r24
    1ec8:	84 23       	and	r24, r20
    1eca:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <GPIO_readPin>:

/* Description
It Reads and returns the value for the required pin, it should be Logic High or Logic Low.
If the input port number or pin number are not correct, The function will return Logic
Low.*/
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <GPIO_readPin+0x6>
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <GPIO_readPin+0x8>
    1ee4:	0f 92       	push	r0
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	8a 83       	std	Y+2, r24	; 0x02
    1eec:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value=LOGIC_LOW;
    1eee:	19 82       	std	Y+1, r1	; 0x01
	/* checks the input number of port or pin has exceeded the limit number */
	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS))
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	84 30       	cpi	r24, 0x04	; 4
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <GPIO_readPin+0x1c>
    1ef6:	84 c0       	rjmp	.+264    	; 0x2000 <GPIO_readPin+0x124>
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	88 30       	cpi	r24, 0x08	; 8
    1efc:	08 f0       	brcs	.+2      	; 0x1f00 <GPIO_readPin+0x24>
    1efe:	80 c0       	rjmp	.+256    	; 0x2000 <GPIO_readPin+0x124>
		/* nothing to do */
	}
	else
		/* Read the required pin value */
	{
		switch(port_num)
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	3d 83       	std	Y+5, r19	; 0x05
    1f08:	2c 83       	std	Y+4, r18	; 0x04
    1f0a:	4c 81       	ldd	r20, Y+4	; 0x04
    1f0c:	5d 81       	ldd	r21, Y+5	; 0x05
    1f0e:	41 30       	cpi	r20, 0x01	; 1
    1f10:	51 05       	cpc	r21, r1
    1f12:	79 f1       	breq	.+94     	; 0x1f72 <GPIO_readPin+0x96>
    1f14:	8c 81       	ldd	r24, Y+4	; 0x04
    1f16:	9d 81       	ldd	r25, Y+5	; 0x05
    1f18:	82 30       	cpi	r24, 0x02	; 2
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	34 f4       	brge	.+12     	; 0x1f2a <GPIO_readPin+0x4e>
    1f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f20:	3d 81       	ldd	r19, Y+5	; 0x05
    1f22:	21 15       	cp	r18, r1
    1f24:	31 05       	cpc	r19, r1
    1f26:	69 f0       	breq	.+26     	; 0x1f42 <GPIO_readPin+0x66>
    1f28:	6b c0       	rjmp	.+214    	; 0x2000 <GPIO_readPin+0x124>
    1f2a:	4c 81       	ldd	r20, Y+4	; 0x04
    1f2c:	5d 81       	ldd	r21, Y+5	; 0x05
    1f2e:	42 30       	cpi	r20, 0x02	; 2
    1f30:	51 05       	cpc	r21, r1
    1f32:	b9 f1       	breq	.+110    	; 0x1fa2 <GPIO_readPin+0xc6>
    1f34:	8c 81       	ldd	r24, Y+4	; 0x04
    1f36:	9d 81       	ldd	r25, Y+5	; 0x05
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <GPIO_readPin+0x64>
    1f3e:	49 c0       	rjmp	.+146    	; 0x1fd2 <GPIO_readPin+0xf6>
    1f40:	5f c0       	rjmp	.+190    	; 0x2000 <GPIO_readPin+0x124>
				{
				case PORTA_ID:
					if(BIT_IS_SET(PINA,pin_num))
    1f42:	e9 e3       	ldi	r30, 0x39	; 57
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	88 2f       	mov	r24, r24
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	a9 01       	movw	r20, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <GPIO_readPin+0x7e>
    1f56:	55 95       	asr	r21
    1f58:	47 95       	ror	r20
    1f5a:	8a 95       	dec	r24
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <GPIO_readPin+0x7a>
    1f5e:	ca 01       	movw	r24, r20
    1f60:	81 70       	andi	r24, 0x01	; 1
    1f62:	90 70       	andi	r25, 0x00	; 0
    1f64:	88 23       	and	r24, r24
    1f66:	19 f0       	breq	.+6      	; 0x1f6e <GPIO_readPin+0x92>
					{
						pin_value=LOGIC_HIGH;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	49 c0       	rjmp	.+146    	; 0x2000 <GPIO_readPin+0x124>
					}
					else
					{
						pin_value=LOGIC_LOW;
    1f6e:	19 82       	std	Y+1, r1	; 0x01
    1f70:	47 c0       	rjmp	.+142    	; 0x2000 <GPIO_readPin+0x124>
					}
					break;
				case PORTB_ID:
					if(BIT_IS_SET(PINB,pin_num))
    1f72:	e6 e3       	ldi	r30, 0x36	; 54
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a9 01       	movw	r20, r18
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <GPIO_readPin+0xae>
    1f86:	55 95       	asr	r21
    1f88:	47 95       	ror	r20
    1f8a:	8a 95       	dec	r24
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <GPIO_readPin+0xaa>
    1f8e:	ca 01       	movw	r24, r20
    1f90:	81 70       	andi	r24, 0x01	; 1
    1f92:	90 70       	andi	r25, 0x00	; 0
    1f94:	88 23       	and	r24, r24
    1f96:	19 f0       	breq	.+6      	; 0x1f9e <GPIO_readPin+0xc2>
					{
						pin_value=LOGIC_HIGH;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	31 c0       	rjmp	.+98     	; 0x2000 <GPIO_readPin+0x124>
					}
					else
					{
						pin_value=LOGIC_LOW;
    1f9e:	19 82       	std	Y+1, r1	; 0x01
    1fa0:	2f c0       	rjmp	.+94     	; 0x2000 <GPIO_readPin+0x124>
					}
					break;
				case PORTC_ID:
					if(BIT_IS_SET(PINC,pin_num))
    1fa2:	e3 e3       	ldi	r30, 0x33	; 51
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	88 2f       	mov	r24, r24
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a9 01       	movw	r20, r18
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <GPIO_readPin+0xde>
    1fb6:	55 95       	asr	r21
    1fb8:	47 95       	ror	r20
    1fba:	8a 95       	dec	r24
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <GPIO_readPin+0xda>
    1fbe:	ca 01       	movw	r24, r20
    1fc0:	81 70       	andi	r24, 0x01	; 1
    1fc2:	90 70       	andi	r25, 0x00	; 0
    1fc4:	88 23       	and	r24, r24
    1fc6:	19 f0       	breq	.+6      	; 0x1fce <GPIO_readPin+0xf2>
					{
						pin_value=LOGIC_HIGH;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	19 c0       	rjmp	.+50     	; 0x2000 <GPIO_readPin+0x124>
					}
					else
					{
						pin_value=LOGIC_LOW;
    1fce:	19 82       	std	Y+1, r1	; 0x01
    1fd0:	17 c0       	rjmp	.+46     	; 0x2000 <GPIO_readPin+0x124>
					}
					break;
				case PORTD_ID:
					if(BIT_IS_SET(PIND,pin_num))
    1fd2:	e0 e3       	ldi	r30, 0x30	; 48
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	88 2f       	mov	r24, r24
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a9 01       	movw	r20, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <GPIO_readPin+0x10e>
    1fe6:	55 95       	asr	r21
    1fe8:	47 95       	ror	r20
    1fea:	8a 95       	dec	r24
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <GPIO_readPin+0x10a>
    1fee:	ca 01       	movw	r24, r20
    1ff0:	81 70       	andi	r24, 0x01	; 1
    1ff2:	90 70       	andi	r25, 0x00	; 0
    1ff4:	88 23       	and	r24, r24
    1ff6:	19 f0       	breq	.+6      	; 0x1ffe <GPIO_readPin+0x122>
					{
						pin_value=LOGIC_HIGH;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <GPIO_readPin+0x124>
					}
					else
					{
						pin_value=LOGIC_LOW;
    1ffe:	19 82       	std	Y+1, r1	; 0x01
					}
					break;
				}
	}
	return pin_value;
    2000:	89 81       	ldd	r24, Y+1	; 0x01
}
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <GPIO_setupPortDirection>:
/*Description
* It Setups the direction of the required port all pins input/output.
If the direction value is PORT_INPUT all pins in this port should be input pins.
If the direction value is PORT_OUTPUT all pins in this port should be output pins.
If the input port number is not correct, The function will not handle the request.*/
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction){
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	00 d0       	rcall	.+0      	; 0x2018 <GPIO_setupPortDirection+0x6>
    2018:	00 d0       	rcall	.+0      	; 0x201a <GPIO_setupPortDirection+0x8>
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	6a 83       	std	Y+2, r22	; 0x02
	/* checks the input number of port has exceeded the limit number */
	if(port_num>=NUM_OF_PORTS)
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	84 30       	cpi	r24, 0x04	; 4
    2026:	90 f5       	brcc	.+100    	; 0x208c <GPIO_setupPortDirection+0x7a>
		/* nothing to do */
	}
	else
	{
		/* setup the required port */
		switch(port_num)
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	3c 83       	std	Y+4, r19	; 0x04
    2030:	2b 83       	std	Y+3, r18	; 0x03
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	91 05       	cpc	r25, r1
    203a:	d1 f0       	breq	.+52     	; 0x2070 <GPIO_setupPortDirection+0x5e>
    203c:	2b 81       	ldd	r18, Y+3	; 0x03
    203e:	3c 81       	ldd	r19, Y+4	; 0x04
    2040:	22 30       	cpi	r18, 0x02	; 2
    2042:	31 05       	cpc	r19, r1
    2044:	2c f4       	brge	.+10     	; 0x2050 <GPIO_setupPortDirection+0x3e>
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	61 f0       	breq	.+24     	; 0x2066 <GPIO_setupPortDirection+0x54>
    204e:	1e c0       	rjmp	.+60     	; 0x208c <GPIO_setupPortDirection+0x7a>
    2050:	2b 81       	ldd	r18, Y+3	; 0x03
    2052:	3c 81       	ldd	r19, Y+4	; 0x04
    2054:	22 30       	cpi	r18, 0x02	; 2
    2056:	31 05       	cpc	r19, r1
    2058:	81 f0       	breq	.+32     	; 0x207a <GPIO_setupPortDirection+0x68>
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	83 30       	cpi	r24, 0x03	; 3
    2060:	91 05       	cpc	r25, r1
    2062:	81 f0       	breq	.+32     	; 0x2084 <GPIO_setupPortDirection+0x72>
    2064:	13 c0       	rjmp	.+38     	; 0x208c <GPIO_setupPortDirection+0x7a>
				{
				case PORTA_ID:
                    DDRA =direction;
    2066:	ea e3       	ldi	r30, 0x3A	; 58
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	80 83       	st	Z, r24
    206e:	0e c0       	rjmp	.+28     	; 0x208c <GPIO_setupPortDirection+0x7a>
					break;
				case PORTB_ID:
                    DDRB =direction;
    2070:	e7 e3       	ldi	r30, 0x37	; 55
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	80 83       	st	Z, r24
    2078:	09 c0       	rjmp	.+18     	; 0x208c <GPIO_setupPortDirection+0x7a>
					break;
				case PORTC_ID:
                    DDRC =direction;
    207a:	e4 e3       	ldi	r30, 0x34	; 52
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	80 83       	st	Z, r24
    2082:	04 c0       	rjmp	.+8      	; 0x208c <GPIO_setupPortDirection+0x7a>
					break;
				case PORTD_ID:
                    DDRD =direction;
    2084:	e1 e3       	ldi	r30, 0x31	; 49
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	80 83       	st	Z, r24
					break;
				}
	}
}
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <GPIO_writePort>:
/* Description
It Writes the value Logic High or Logic Low on the required pin.
If the input port number or pin number are not correct, The function will not handle the
request.
If the pin is input, this function will enable/disable the internal pull-up resistor.  */
void GPIO_writePort(uint8 port_num, uint8 value){
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <GPIO_writePort+0x6>
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <GPIO_writePort+0x8>
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	6a 83       	std	Y+2, r22	; 0x02
	/* checks the input number of port has exceeded the limit number */
	if(port_num>=NUM_OF_PORTS)
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	84 30       	cpi	r24, 0x04	; 4
    20ae:	90 f5       	brcc	.+100    	; 0x2114 <GPIO_writePort+0x7a>
		/* nothing to do */
	}
	else
	{
		/* write value to the required port */
		switch(port_num)
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	3c 83       	std	Y+4, r19	; 0x04
    20b8:	2b 83       	std	Y+3, r18	; 0x03
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	9c 81       	ldd	r25, Y+4	; 0x04
    20be:	81 30       	cpi	r24, 0x01	; 1
    20c0:	91 05       	cpc	r25, r1
    20c2:	d1 f0       	breq	.+52     	; 0x20f8 <GPIO_writePort+0x5e>
    20c4:	2b 81       	ldd	r18, Y+3	; 0x03
    20c6:	3c 81       	ldd	r19, Y+4	; 0x04
    20c8:	22 30       	cpi	r18, 0x02	; 2
    20ca:	31 05       	cpc	r19, r1
    20cc:	2c f4       	brge	.+10     	; 0x20d8 <GPIO_writePort+0x3e>
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	61 f0       	breq	.+24     	; 0x20ee <GPIO_writePort+0x54>
    20d6:	1e c0       	rjmp	.+60     	; 0x2114 <GPIO_writePort+0x7a>
    20d8:	2b 81       	ldd	r18, Y+3	; 0x03
    20da:	3c 81       	ldd	r19, Y+4	; 0x04
    20dc:	22 30       	cpi	r18, 0x02	; 2
    20de:	31 05       	cpc	r19, r1
    20e0:	81 f0       	breq	.+32     	; 0x2102 <GPIO_writePort+0x68>
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	9c 81       	ldd	r25, Y+4	; 0x04
    20e6:	83 30       	cpi	r24, 0x03	; 3
    20e8:	91 05       	cpc	r25, r1
    20ea:	81 f0       	breq	.+32     	; 0x210c <GPIO_writePort+0x72>
    20ec:	13 c0       	rjmp	.+38     	; 0x2114 <GPIO_writePort+0x7a>
				{
				case PORTA_ID:
                    PORTA =value;
    20ee:	eb e3       	ldi	r30, 0x3B	; 59
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	80 83       	st	Z, r24
    20f6:	0e c0       	rjmp	.+28     	; 0x2114 <GPIO_writePort+0x7a>
					break;
				case PORTB_ID:
                    PORTB =value;
    20f8:	e8 e3       	ldi	r30, 0x38	; 56
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	80 83       	st	Z, r24
    2100:	09 c0       	rjmp	.+18     	; 0x2114 <GPIO_writePort+0x7a>
					break;
				case PORTC_ID:
                    PORTC =value;
    2102:	e5 e3       	ldi	r30, 0x35	; 53
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
    2108:	80 83       	st	Z, r24
    210a:	04 c0       	rjmp	.+8      	; 0x2114 <GPIO_writePort+0x7a>
					break;
				case PORTD_ID:
                    PORTD =value;
    210c:	e2 e3       	ldi	r30, 0x32	; 50
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	80 83       	st	Z, r24
					break;
				}
	}
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <GPIO_readPort>:

/* Description
It Reads and returns the value of the required port.
If the input port number is not correct, The function will return ZERO value. */
uint8 GPIO_readPort(uint8 port_num){
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	00 d0       	rcall	.+0      	; 0x2128 <GPIO_readPort+0x6>
    2128:	00 d0       	rcall	.+0      	; 0x212a <GPIO_readPort+0x8>
    212a:	0f 92       	push	r0
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value=LOGIC_LOW;
    2132:	19 82       	std	Y+1, r1	; 0x01
	/* checks the input number of port has exceeded the limit number */
	if(port_num>=NUM_OF_PORTS)
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	84 30       	cpi	r24, 0x04	; 4
    2138:	10 f0       	brcs	.+4      	; 0x213e <GPIO_readPort+0x1c>
	{
		return LOGIC_LOW;
    213a:	1d 82       	std	Y+5, r1	; 0x05
    213c:	34 c0       	rjmp	.+104    	; 0x21a6 <GPIO_readPort+0x84>
	}
	else
	{
		/* read value of the required port */
		switch(port_num)
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	3c 83       	std	Y+4, r19	; 0x04
    2146:	2b 83       	std	Y+3, r18	; 0x03
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	91 05       	cpc	r25, r1
    2150:	d1 f0       	breq	.+52     	; 0x2186 <GPIO_readPort+0x64>
    2152:	2b 81       	ldd	r18, Y+3	; 0x03
    2154:	3c 81       	ldd	r19, Y+4	; 0x04
    2156:	22 30       	cpi	r18, 0x02	; 2
    2158:	31 05       	cpc	r19, r1
    215a:	2c f4       	brge	.+10     	; 0x2166 <GPIO_readPort+0x44>
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	61 f0       	breq	.+24     	; 0x217c <GPIO_readPort+0x5a>
    2164:	1e c0       	rjmp	.+60     	; 0x21a2 <GPIO_readPort+0x80>
    2166:	2b 81       	ldd	r18, Y+3	; 0x03
    2168:	3c 81       	ldd	r19, Y+4	; 0x04
    216a:	22 30       	cpi	r18, 0x02	; 2
    216c:	31 05       	cpc	r19, r1
    216e:	81 f0       	breq	.+32     	; 0x2190 <GPIO_readPort+0x6e>
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	83 30       	cpi	r24, 0x03	; 3
    2176:	91 05       	cpc	r25, r1
    2178:	81 f0       	breq	.+32     	; 0x219a <GPIO_readPort+0x78>
    217a:	13 c0       	rjmp	.+38     	; 0x21a2 <GPIO_readPort+0x80>
				{
				case PORTA_ID:
                    port_value=PINA;
    217c:	e9 e3       	ldi	r30, 0x39	; 57
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	0e c0       	rjmp	.+28     	; 0x21a2 <GPIO_readPort+0x80>
					break;
				case PORTB_ID:
                    port_value=PINB;
    2186:	e6 e3       	ldi	r30, 0x36	; 54
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	09 c0       	rjmp	.+18     	; 0x21a2 <GPIO_readPort+0x80>
					break;
				case PORTC_ID:
                    port_value=PINC;
    2190:	e3 e3       	ldi	r30, 0x33	; 51
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	04 c0       	rjmp	.+8      	; 0x21a2 <GPIO_readPort+0x80>
					break;
				case PORTD_ID:
                    port_value=PIND;
    219a:	e0 e3       	ldi	r30, 0x30	; 48
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}
	return port_value;
    21a2:	99 81       	ldd	r25, Y+1	; 0x01
    21a4:	9d 83       	std	Y+5, r25	; 0x05
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <main>:
#include "lcd_driver.h"
#include "ADC_driver.h"
#include "lm35_driver.h"
#include "dc-motor_driver.h"
int main(void)
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	00 d0       	rcall	.+0      	; 0x21be <main+0x6>
    21be:	0f 92       	push	r0
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
	uint8 temp;
	LCD_init(); /*initialize lcd */
    21c4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <LCD_init>
	ADC_ConfigType config = {INTERNAL,pre_8};
    21c8:	83 e0       	ldi	r24, 0x03	; 3
    21ca:	8a 83       	std	Y+2, r24	; 0x02
    21cc:	83 e0       	ldi	r24, 0x03	; 3
    21ce:	8b 83       	std	Y+3, r24	; 0x03
	ADC_init(&config);
    21d0:	ce 01       	movw	r24, r28
    21d2:	02 96       	adiw	r24, 0x02	; 2
    21d4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_init>
	DcMotor_init();
    21d8:	0e 94 7f 07 	call	0xefe	; 0xefe <DcMotor_init>
	/*Display the string */
	LCD_displayStringRowColumn(0,4,"Fan is ");
    21dc:	20 e6       	ldi	r18, 0x60	; 96
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	64 e0       	ldi	r22, 0x04	; 4
    21e4:	a9 01       	movw	r20, r18
    21e6:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,4,"Temp =    C");
    21ea:	28 e6       	ldi	r18, 0x68	; 104
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	64 e0       	ldi	r22, 0x04	; 4
    21f2:	a9 01       	movw	r20, r18
    21f4:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_displayStringRowColumn>
	while(1)
	{
		temp=LM35_GetTemperature();
    21f8:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <LM35_GetTemperature>
    21fc:	89 83       	std	Y+1, r24	; 0x01
		if((temp>=0)&&(temp<30))
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	8e 31       	cpi	r24, 0x1E	; 30
    2202:	40 f5       	brcc	.+80     	; 0x2254 <main+0x9c>
		{
			LCD_moveCursor(0,11);
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	6b e0       	ldi	r22, 0x0B	; 11
    2208:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
			LCD_displayString("OFF");
    220c:	84 e7       	ldi	r24, 0x74	; 116
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_displayString>
			LCD_moveCursor(1,11);
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	6b e0       	ldi	r22, 0x0B	; 11
    2218:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
			if(temp < 10)
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	8a 30       	cpi	r24, 0x0A	; 10
    2220:	60 f4       	brcc	.+24     	; 0x223a <main+0x82>
			{
				LCD_intgerToString(temp);
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	88 2f       	mov	r24, r24
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_intgerToString>
				LCD_displayCharacter(' ');
    222c:	80 e2       	ldi	r24, 0x20	; 32
    222e:	0e 94 6d 0a 	call	0x14da	; 0x14da <LCD_displayCharacter>
				LCD_displayCharacter(' ');
    2232:	80 e2       	ldi	r24, 0x20	; 32
    2234:	0e 94 6d 0a 	call	0x14da	; 0x14da <LCD_displayCharacter>
    2238:	08 c0       	rjmp	.+16     	; 0x224a <main+0x92>
			}
			else
			{
				LCD_intgerToString(temp);
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_intgerToString>
				LCD_displayCharacter(' ');
    2244:	80 e2       	ldi	r24, 0x20	; 32
    2246:	0e 94 6d 0a 	call	0x14da	; 0x14da <LCD_displayCharacter>
			}
			DcMotor_Rotate(STOP,0);
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	0e 94 9a 07 	call	0xf34	; 0xf34 <DcMotor_Rotate>
    2252:	d2 cf       	rjmp	.-92     	; 0x21f8 <main+0x40>
		}
	    else if((temp>=30)&&(temp<60))
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	8e 31       	cpi	r24, 0x1E	; 30
    2258:	e0 f0       	brcs	.+56     	; 0x2292 <main+0xda>
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	8c 33       	cpi	r24, 0x3C	; 60
    225e:	c8 f4       	brcc	.+50     	; 0x2292 <main+0xda>
		{
			LCD_moveCursor(0,11);
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	6b e0       	ldi	r22, 0x0B	; 11
    2264:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
			LCD_displayString("ON ");
    2268:	88 e7       	ldi	r24, 0x78	; 120
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_displayString>
			LCD_moveCursor(1,11);
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	6b e0       	ldi	r22, 0x0B	; 11
    2274:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
            LCD_intgerToString(temp);
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	88 2f       	mov	r24, r24
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_intgerToString>
            LCD_displayCharacter(' ');
    2282:	80 e2       	ldi	r24, 0x20	; 32
    2284:	0e 94 6d 0a 	call	0x14da	; 0x14da <LCD_displayCharacter>
			DcMotor_Rotate(CW,25);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	69 e1       	ldi	r22, 0x19	; 25
    228c:	0e 94 9a 07 	call	0xf34	; 0xf34 <DcMotor_Rotate>
    2290:	b3 cf       	rjmp	.-154    	; 0x21f8 <main+0x40>
		}
		else if((temp>=60)&&(temp<90))
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	8c 33       	cpi	r24, 0x3C	; 60
    2296:	e0 f0       	brcs	.+56     	; 0x22d0 <main+0x118>
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	8a 35       	cpi	r24, 0x5A	; 90
    229c:	c8 f4       	brcc	.+50     	; 0x22d0 <main+0x118>
		{
			LCD_moveCursor(0,11);
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	6b e0       	ldi	r22, 0x0B	; 11
    22a2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
			LCD_displayString("ON ");
    22a6:	88 e7       	ldi	r24, 0x78	; 120
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_displayString>
			LCD_moveCursor(1,11);
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	6b e0       	ldi	r22, 0x0B	; 11
    22b2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
            LCD_intgerToString(temp);
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_intgerToString>
            LCD_displayCharacter(' ');
    22c0:	80 e2       	ldi	r24, 0x20	; 32
    22c2:	0e 94 6d 0a 	call	0x14da	; 0x14da <LCD_displayCharacter>
			DcMotor_Rotate(CW,50);
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	62 e3       	ldi	r22, 0x32	; 50
    22ca:	0e 94 9a 07 	call	0xf34	; 0xf34 <DcMotor_Rotate>
    22ce:	94 cf       	rjmp	.-216    	; 0x21f8 <main+0x40>
		}
		else if((temp>=90)&&(temp<120))
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	8a 35       	cpi	r24, 0x5A	; 90
    22d4:	e0 f0       	brcs	.+56     	; 0x230e <main+0x156>
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	88 37       	cpi	r24, 0x78	; 120
    22da:	c8 f4       	brcc	.+50     	; 0x230e <main+0x156>
		{
			LCD_moveCursor(0,11);
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	6b e0       	ldi	r22, 0x0B	; 11
    22e0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
			LCD_displayString("ON ");
    22e4:	88 e7       	ldi	r24, 0x78	; 120
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_displayString>
			LCD_moveCursor(1,11);
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	6b e0       	ldi	r22, 0x0B	; 11
    22f0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
            LCD_intgerToString(temp);
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	88 2f       	mov	r24, r24
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_intgerToString>
            LCD_displayCharacter(' ');
    22fe:	80 e2       	ldi	r24, 0x20	; 32
    2300:	0e 94 6d 0a 	call	0x14da	; 0x14da <LCD_displayCharacter>
			DcMotor_Rotate(CW,75);
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	6b e4       	ldi	r22, 0x4B	; 75
    2308:	0e 94 9a 07 	call	0xf34	; 0xf34 <DcMotor_Rotate>
    230c:	75 cf       	rjmp	.-278    	; 0x21f8 <main+0x40>
		}
		else if(temp>=120)
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	88 37       	cpi	r24, 0x78	; 120
    2312:	c8 f0       	brcs	.+50     	; 0x2346 <main+0x18e>
		{
			LCD_moveCursor(0,11);
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	6b e0       	ldi	r22, 0x0B	; 11
    2318:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
			LCD_displayString("ON ");
    231c:	88 e7       	ldi	r24, 0x78	; 120
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_displayString>
			LCD_moveCursor(1,11);
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	6b e0       	ldi	r22, 0x0B	; 11
    2328:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
            LCD_intgerToString(temp);
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_intgerToString>
            LCD_displayCharacter(' ');
    2336:	80 e2       	ldi	r24, 0x20	; 32
    2338:	0e 94 6d 0a 	call	0x14da	; 0x14da <LCD_displayCharacter>
			DcMotor_Rotate(CW,100);
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	64 e6       	ldi	r22, 0x64	; 100
    2340:	0e 94 9a 07 	call	0xf34	; 0xf34 <DcMotor_Rotate>
    2344:	59 cf       	rjmp	.-334    	; 0x21f8 <main+0x40>
		}
		else
		{
			LCD_moveCursor(0, 11);
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	6b e0       	ldi	r22, 0x0B	; 11
    234a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
			LCD_displayStringRowColumn(0, 4, "OFF");
    234e:	24 e7       	ldi	r18, 0x74	; 116
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	64 e0       	ldi	r22, 0x04	; 4
    2356:	a9 01       	movw	r20, r18
    2358:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 11);
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	6b e0       	ldi	r22, 0x0B	; 11
    2360:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_moveCursor>
			LCD_intgerToString(0);
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_intgerToString>
			DcMotor_Rotate(STOP, 0);
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	0e 94 9a 07 	call	0xf34	; 0xf34 <DcMotor_Rotate>
    2374:	41 cf       	rjmp	.-382    	; 0x21f8 <main+0x40>

00002376 <__mulsi3>:
    2376:	62 9f       	mul	r22, r18
    2378:	d0 01       	movw	r26, r0
    237a:	73 9f       	mul	r23, r19
    237c:	f0 01       	movw	r30, r0
    237e:	82 9f       	mul	r24, r18
    2380:	e0 0d       	add	r30, r0
    2382:	f1 1d       	adc	r31, r1
    2384:	64 9f       	mul	r22, r20
    2386:	e0 0d       	add	r30, r0
    2388:	f1 1d       	adc	r31, r1
    238a:	92 9f       	mul	r25, r18
    238c:	f0 0d       	add	r31, r0
    238e:	83 9f       	mul	r24, r19
    2390:	f0 0d       	add	r31, r0
    2392:	74 9f       	mul	r23, r20
    2394:	f0 0d       	add	r31, r0
    2396:	65 9f       	mul	r22, r21
    2398:	f0 0d       	add	r31, r0
    239a:	99 27       	eor	r25, r25
    239c:	72 9f       	mul	r23, r18
    239e:	b0 0d       	add	r27, r0
    23a0:	e1 1d       	adc	r30, r1
    23a2:	f9 1f       	adc	r31, r25
    23a4:	63 9f       	mul	r22, r19
    23a6:	b0 0d       	add	r27, r0
    23a8:	e1 1d       	adc	r30, r1
    23aa:	f9 1f       	adc	r31, r25
    23ac:	bd 01       	movw	r22, r26
    23ae:	cf 01       	movw	r24, r30
    23b0:	11 24       	eor	r1, r1
    23b2:	08 95       	ret

000023b4 <__prologue_saves__>:
    23b4:	2f 92       	push	r2
    23b6:	3f 92       	push	r3
    23b8:	4f 92       	push	r4
    23ba:	5f 92       	push	r5
    23bc:	6f 92       	push	r6
    23be:	7f 92       	push	r7
    23c0:	8f 92       	push	r8
    23c2:	9f 92       	push	r9
    23c4:	af 92       	push	r10
    23c6:	bf 92       	push	r11
    23c8:	cf 92       	push	r12
    23ca:	df 92       	push	r13
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	ca 1b       	sub	r28, r26
    23de:	db 0b       	sbc	r29, r27
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	09 94       	ijmp

000023ec <__epilogue_restores__>:
    23ec:	2a 88       	ldd	r2, Y+18	; 0x12
    23ee:	39 88       	ldd	r3, Y+17	; 0x11
    23f0:	48 88       	ldd	r4, Y+16	; 0x10
    23f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    23f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    23f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    23f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    23fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    23fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    23fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2400:	c8 84       	ldd	r12, Y+8	; 0x08
    2402:	df 80       	ldd	r13, Y+7	; 0x07
    2404:	ee 80       	ldd	r14, Y+6	; 0x06
    2406:	fd 80       	ldd	r15, Y+5	; 0x05
    2408:	0c 81       	ldd	r16, Y+4	; 0x04
    240a:	1b 81       	ldd	r17, Y+3	; 0x03
    240c:	aa 81       	ldd	r26, Y+2	; 0x02
    240e:	b9 81       	ldd	r27, Y+1	; 0x01
    2410:	ce 0f       	add	r28, r30
    2412:	d1 1d       	adc	r29, r1
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	ed 01       	movw	r28, r26
    2420:	08 95       	ret

00002422 <itoa>:
    2422:	fb 01       	movw	r30, r22
    2424:	9f 01       	movw	r18, r30
    2426:	e8 94       	clt
    2428:	42 30       	cpi	r20, 0x02	; 2
    242a:	c4 f0       	brlt	.+48     	; 0x245c <itoa+0x3a>
    242c:	45 32       	cpi	r20, 0x25	; 37
    242e:	b4 f4       	brge	.+44     	; 0x245c <itoa+0x3a>
    2430:	4a 30       	cpi	r20, 0x0A	; 10
    2432:	29 f4       	brne	.+10     	; 0x243e <itoa+0x1c>
    2434:	97 fb       	bst	r25, 7
    2436:	1e f4       	brtc	.+6      	; 0x243e <itoa+0x1c>
    2438:	90 95       	com	r25
    243a:	81 95       	neg	r24
    243c:	9f 4f       	sbci	r25, 0xFF	; 255
    243e:	64 2f       	mov	r22, r20
    2440:	77 27       	eor	r23, r23
    2442:	0e 94 42 12 	call	0x2484	; 0x2484 <__udivmodhi4>
    2446:	80 5d       	subi	r24, 0xD0	; 208
    2448:	8a 33       	cpi	r24, 0x3A	; 58
    244a:	0c f0       	brlt	.+2      	; 0x244e <itoa+0x2c>
    244c:	89 5d       	subi	r24, 0xD9	; 217
    244e:	81 93       	st	Z+, r24
    2450:	cb 01       	movw	r24, r22
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	a1 f7       	brne	.-24     	; 0x243e <itoa+0x1c>
    2456:	16 f4       	brtc	.+4      	; 0x245c <itoa+0x3a>
    2458:	5d e2       	ldi	r21, 0x2D	; 45
    245a:	51 93       	st	Z+, r21
    245c:	10 82       	st	Z, r1
    245e:	c9 01       	movw	r24, r18
    2460:	0c 94 32 12 	jmp	0x2464	; 0x2464 <strrev>

00002464 <strrev>:
    2464:	dc 01       	movw	r26, r24
    2466:	fc 01       	movw	r30, r24
    2468:	67 2f       	mov	r22, r23
    246a:	71 91       	ld	r23, Z+
    246c:	77 23       	and	r23, r23
    246e:	e1 f7       	brne	.-8      	; 0x2468 <strrev+0x4>
    2470:	32 97       	sbiw	r30, 0x02	; 2
    2472:	04 c0       	rjmp	.+8      	; 0x247c <strrev+0x18>
    2474:	7c 91       	ld	r23, X
    2476:	6d 93       	st	X+, r22
    2478:	70 83       	st	Z, r23
    247a:	62 91       	ld	r22, -Z
    247c:	ae 17       	cp	r26, r30
    247e:	bf 07       	cpc	r27, r31
    2480:	c8 f3       	brcs	.-14     	; 0x2474 <strrev+0x10>
    2482:	08 95       	ret

00002484 <__udivmodhi4>:
    2484:	aa 1b       	sub	r26, r26
    2486:	bb 1b       	sub	r27, r27
    2488:	51 e1       	ldi	r21, 0x11	; 17
    248a:	07 c0       	rjmp	.+14     	; 0x249a <__udivmodhi4_ep>

0000248c <__udivmodhi4_loop>:
    248c:	aa 1f       	adc	r26, r26
    248e:	bb 1f       	adc	r27, r27
    2490:	a6 17       	cp	r26, r22
    2492:	b7 07       	cpc	r27, r23
    2494:	10 f0       	brcs	.+4      	; 0x249a <__udivmodhi4_ep>
    2496:	a6 1b       	sub	r26, r22
    2498:	b7 0b       	sbc	r27, r23

0000249a <__udivmodhi4_ep>:
    249a:	88 1f       	adc	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	5a 95       	dec	r21
    24a0:	a9 f7       	brne	.-22     	; 0x248c <__udivmodhi4_loop>
    24a2:	80 95       	com	r24
    24a4:	90 95       	com	r25
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	08 95       	ret

000024ac <_exit>:
    24ac:	f8 94       	cli

000024ae <__stop_program>:
    24ae:	ff cf       	rjmp	.-2      	; 0x24ae <__stop_program>
